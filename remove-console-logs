#!/usr/bin/env node
/* Copyright 2012 Huygens ING
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

var fs = require('fs'),
    falafel = require('falafel'),
    optimist = require('optimist');

var myArgs = optimist.usage("Remove console logs from a JS file.\nUsage: $0")
                     .alias('h', 'help')
                     .alias('l', 'logonly')
                     .alias('i', 'input')
                     .alias('o', 'output')
                     .default('o', 'stdout')
                     .default('i', 'stdin')
                     .default('l', false)
                     .default('h', false)
                     .describe('i', 'Read input from this file, "stdin" to read from standard in.')
                     .describe('o', 'Write output to this file, "stdout" to write to standard out.')
                     .describe('l', 'Limit to replacing the "log" method, otherwise all other console calls will be removed, too.')
                     .describe('h', 'Print this help.');

var CONSOLE_METHODS = [
    'assert',
    'clear',
    'count',
    'debug',
    'dir',
    'dirxml',
    'error',
    'exception',
    'error',
    'group',
    'groupEnd',
    'groupCollapsed',
    'info',
    'log',
    'memoryProfile',
    'memoryProfileEnd',
    'profile',
    'profileEnd',
    'table',
    'time',
    'timeEnd',
    'timeStamp',
    'trace',
    'warn'
];

var args = myArgs.argv;

if (args.h) {
  myArgs.showHelp();
  process.exit(0);
}

var instream, outstream;

var isStdOut = false;

if (args.o == 'stdout') {
  isStdOut = true;
  outstream = process.stdout;
}

if (args.i == 'stdin') {
  instream = process.stdin;
  instream.resume();
} else {
  instream = fs.createReadStream(args.i);
}
instream.setEncoding('utf8');

var scriptdata = '';

instream.on('data', function(str) { scriptdata += str; });
instream.on('end', function() {
  var outputStr = falafel(scriptdata, function(node) {
    if (isConsoleLog(node)) { 
      node.update('0');
    }
  });

  if (isStdOut) {
    outstream.write(outputStr);
    process.exit(0);
  } else {
    fs.writeFile(args.o, outputStr, 'utf8', function() { console.log('Saved output as "' + args.o + '".'); });
  }
});

function isConsoleLog(node) {
  function isConsole(n) {
    return (n.name == 'console') || (n.object && n.object.name == 'window' && n.property.name == 'console'); 
  };
  function shouldMessWithMethod(method) {
    return method && ((args.l && method.name == 'log') ||
                      (!args.l && CONSOLE_METHODS.indexOf(method.name) != -1));
  };
  return node.type == 'CallExpression' && node.callee && node.callee.object && isConsole(node.callee.object) && shouldMessWithMethod(node.callee.property);
}


